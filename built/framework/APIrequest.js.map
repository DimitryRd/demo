{"version":3,"file":"APIrequest.js","sourceRoot":"","sources":["../../framework/APIrequest.ts"],"names":[],"mappings":"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","sourcesContent":["import * as request from 'request'\n\nimport * as requestPromise from 'request-promise-native'\nimport { URL } from 'url'\n\nimport { validateBodyFor } from './RAMLvaildator'\n\nexport class APIRequest {\n  protected client = requestPromise\n  private options: request.OptionsWithUri\n\n  constructor(relativeURL: string) {\n    // Hardcoded, but can be overrided\n    const api_url = process.env.API_URL || 'https://my-json-server.typicode.com/Xotabu4/demo'\n    // Prepending with slash\n    relativeURL = relativeURL.startsWith('/') ? relativeURL : '/' + relativeURL\n    let concatenated = process.env.API_URL + relativeURL\n\n    // initializing options object\n    this.options = {\n      uri: concatenated,\n      method: 'GET' // Doing GET request by default\n    }\n\n    this.client = requestPromise.defaults({\n      json: true, // sets body to JSON representation of value and adds Content-type: application/json header. Additionally, parses the response body as JSON - https://github.com/request/request\n      time: true, // For logging purposes\n      resolveWithFullResponse: true, // To get full response, not just body\n      followAllRedirects: true\n    })\n  }\n\n  public method(method: 'POST' | 'GET'): APIRequest {\n    this.options.method = method\n    return this\n  }\n\n  public queryParameters(queryParameters: Object): APIRequest {\n    // TODO: use Object.assign and do check for existence before\n    this.options.qs = queryParameters\n    return this\n  }\n\n  public async send(): Promise<request.RequestResponse> {\n    // Sending request with collected options, will be merged with default params.\n    let response = (this.client(this.options)) as Promise<request.RequestResponse>\n    //this.logResponse(response)\n    return this.validateAgainstRAML(response)\n  }\n\n  private async logResponse(responsePromise: Promise<request.RequestResponse>) {\n    try {\n      let response = await responsePromise\n      console.log(`${this.options.method}:${response.statusCode}: ${this.options.uri} took: ${response.timingPhases.total.toFixed()} ms`)\n      console.log(`RESPONSE BODY: ${JSON.stringify(response.body, null, 2)}`)\n    } catch (error) {\n      if (error.response) {\n        console.warn(`${this.options.method}:${error.response.statusCode}: ${this.options.uri} took: ${error.response.timingPhases.total} ms`)\n        console.warn(`RESPONSE BODY: ${JSON.stringify(error.response.body, null, 2)}`)\n      } else {\n        console.warn(error.message || error);\n      }\n    }\n  }\n\n  private async validateAgainstRAML(response: Promise<request.RequestResponse>): Promise<request.RequestResponse> {\n    var uri = null\n    //try {\n      console.log('1')\n      let resp = await response\n      uri = resp.request['href'].toString()\n      console.log('2')\n      validateBodyFor(uri, resp.body)\n      console.log(`Validation against RAML documentation for ${uri} passed`)\n    // } catch (error) {\n    //   console.error(`Validation against RAML documentation for ${uri} FAILED`)\n    //   error.response = response\n    //   throw error\n    // }\n    return response\n  }\n}"]}