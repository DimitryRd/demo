{"version":3,"file":"RAMLvaildator.js","sourceRoot":"","sources":["../../framework/RAMLvaildator.ts"],"names":[],"mappings":";;AAAA,sCAAqC;AACrC,6BAAyB;AACzB,6CAA4C;AAE5C,IAAI,QAAQ,GAAmB,IAAI,CAAC;AAGpC,kBAAkB,eAAuB,aAAa;IAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACZ,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAmB,CAAA;IACzF,CAAC;IACD,MAAM,CAAC,QAAQ,CAAA;AACnB,CAAC;AAGD,oCAAoC,GAAW,EAAE,aAAqB,KAAK,EAAE,aAAqB,KAAK;IACnG,IAAI,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QAChB,IAAI,GAAG,GAAG,QAAQ,EAAE,CAAA;QACpB,IAAI,SAAS,GAAG,IAAI,SAAG,CAAC,GAAG,CAAC,CAAA,CAAC,YAAY;QACzC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QAChB,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACtC,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC,CAAC;gBACvE,IAAI,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;gBAClE,GAAG,CAAC,CAAC,MAAM,IAAI,IAAI,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;oBACxC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC;wBACpC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;oBACzB,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,gCAAgC,UAAU,KAAK,UAAU,KAAK,GAAG,EAAE,CAAC,CAAA;IACxF,CAAC;AACL,CAAC;AAED,yBAAgC,GAAW,EAAE,IAAY,EAAE,aAAqB,KAAK,EAAE,aAAqB,KAAK;IAC7G,IAAI,MAAM,GAAG,0BAA0B,CAAC,GAAG,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,oCAAoC,CAAC,IAAI,CAAC,CAAA;IAE/G,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAC1D,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;IAChD,CAAC;IACD,MAAM,CAAA;AACV,CAAC;AARD,0CAQC","sourcesContent":["import * as RAML from 'raml-1-parser'\nimport { URL } from 'url'\nimport * as URItemplate from 'uri-templates'\n\nlet RAML_API: RAML.api10.Api = null;\n\n\nfunction parseAPI(ramlFilePath: string = '../api.raml'): RAML.api10.Api {\n    if (!RAML_API) {\n        RAML_API = RAML.loadApiSync(ramlFilePath, { rejectOnErrors: true }) as RAML.api10.Api\n    }\n    return RAML_API\n}\n\n\nfunction getResponseBodyDeclaration(uri: string, methodName: string = 'get', statusCode: string = '200'): RAML.api10.TypeDeclaration {\n    try {\n        console.log('3')\n        let API = parseAPI()\n        let parsedURL = new URL(uri) // .pathname\n        console.log('4')\n        for (let resource of API.allResources()) {\n            if (URItemplate(parsedURL.pathname).test(resource.completeRelativeUri())) {\n                let methodNode = resource.childMethod(methodName.toLowerCase())[0]\n                for (const resp of methodNode.responses()) {\n                    if (resp.code().value() == statusCode) {\n                        return resp.body()[0]\n                    }\n                }\n            }\n        }\n    } catch (err) {\n        throw new Error(`Cannot find declaration for: ${methodName}: ${statusCode}: ${uri}`)\n    }\n}\n\nexport function validateBodyFor(uri: string, body: object, methodName: string = 'get', statusCode: string = '200') {\n    let status = getResponseBodyDeclaration(uri, methodName, statusCode).validateInstanceWithDetailedStatuses(body)\n\n    if (status.length > 0) {\n        let messages = status.map(st => st.getMessage()).join(' ')\n        throw new Error(`${JSON.stringify(status)}`)\n    }\n    return\n}\n"]}